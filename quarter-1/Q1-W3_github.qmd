---
title: "Git & GitHub"
subtitle: "git, github, rstudio integration"
date: "1/20/2026" # M/D/Y
format:
  revealjs:
    theme: [default, ../theme/d2mr-theme.scss]
    include-in-header:
        # Opt into some
      text: |
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
        <script type="text/javascript" src="../theme/bubbles.js"></script>
    slide-number: c/t
    width: 1600
    height: 900
    margin: .1
    scrollable: true
    incremental: false
    transition: slide
    background-transition: fade
    highlight-style: ../theme/d2mr-code-theme.theme
    code-line-numbers: true
    code-copy: true
    footer: "D2M-R Q1 | Week 3" #  quarter, week, and class
    logo: ""
    chalkboard: true
    multiplex: false
editor: source
execute:
  echo: true
  eval: false
  warning: false
  message: false
---

## Lecture planning

Git & GitHub Essentials Chapter

1. Introduction -- the point of version control
2. Git
  1. Overview & workflow musts
  2. Git lingo
    1. Repositories
      1. repository / repo
      1. initialize
      2. clone
      3. branch & checkout
    2. Version control
      1. commit
      3. stage
      4. fetch
      6. pull
      7. push
  3. Merging
      1. diff
      2. merge
      3. merge conflict
      4. rebase
      5. fast-forward (ff)
      6. squash
      7. cherry-pick
      8. stash
    4. Remote repositories
      1. remote
      2. origin
      3. upstream
      4. fork
      5. pull request
    5. (Optional) Using Git in the terminal
3. Repo structure
  1. What does and does not go in a repo?
  2. Top-level essentials
      1. README
      2. .gitignore
  3. The rest of your stuff
  4. Metadata and information
4. GitHub
  1. What is GitHub? How is it different from Git?
  2. GitHub features
    1. Issues
    2. Pull requests
    3. Pages
    4. Copilot
    5. More
      1. Actions
      2. Projects
      3. Codespaces
  4. Interfacing with GitHub (without RStudio)
    1. GitHub website
    2. GitHub Desktop
    3. Other options
      1. VS Code and other IDEs
      2. GitHub CLI
  5. Interfacing with GitHub in RStudio
    1. Connecting RStudio to GitHub
    2. Using GitHub in RStudio
      1. Cloning a repo
      2. Committing changes
      3. Pushing changes
      4. Pulling changes
      5. Creating pull requests
6. Git Pains
  1. Common issues
  2. Helpful resources
  3. The nuclear option
    
## Housekeeping {.smaller}

This slide has smaller text

- Housekeeping
- and
- announcements
- without
- animation 

## Housekeeping {.bigger}

This slide has bigger text
 
- at least
- I hope so 

# New Main Section

## Simple Bulleted Slide

::: {.fragment .dimmable}
A top-level line that will be dimmed at first.
:::

With a [link](index.html).

### A Third Level Heading

::: {.incremental}
-   First level point
  -  Second level point
    -   Third level point
    -   Third level point 2
-   First level point 2

:::


## Code Slide

Introductory content:

```{r}
#| echo: true
#| eval: false
 
# Define class name
class_name <- "D2M-R"

# Print a message with the variable
paste("Hello", class_name)

```
 
**More information** about the code above.


## Bubbles from the bottom


::: bubble-chain
  <p class="bubble-left fragment">Students ask? Students ask?Students ask?Students ask?Students ask? Students ask? Students ask? Students ask? Students ask?Students ask? </p>
  <p class="bubble-right fragment">And I respond!</p>
:::

This slide has speech bubbles that pop in after all content has been covered.

The container is anchored at the bottom of the page, and the tails point downward.


- Left bubbles, in blue, are things I hear commonly from students
- Right bubbles, in red, are my responses




## Bubbles from the top
 
On this slide, things are a little different:

- The container is anchored to the top of the content section. 
- Bubbles are mirrored vertically with tails pointing up.

::: {.bubble-chain .top}
  <p class="bubble-left fragment">Students ask - UP TOP?</p>
  <p class="bubble-right fragment">And I respond, also up top!</p>
:::
 
 
## Callouts

::: {.callout}
Call-outs can be used without additional class features.
:::

::: {.callout-tip}
Tip: Use call-outs to highlight important information.
:::

::: {.callout-note}

## You can change the callout header from the default

Note: These are examples of call-outs.
:::

::: {.callout-important}
Important: Don't forget to use call-outs!
:::

::: {.callout-warning}
Warning: You have used too many callouts
:::


## Columns

:::: {.columns}

::: {.column width="20%"}
**tibble**  
reimagine the dataframe!
:::

::: {.column width="20%"}
**readr**  
easily import and export tabular data
:::

::: {.column width="20%"}
**dplyr**  
a grammar of data manipulation
:::

::: {.column width="20%"}
**tidyr**  
tidy your messy data
:::

::: {.column width="20%"}
**ggplot2**  
a grammar of graphics
:::

::::

:::: {.columns .fragment}

::: {.column width="25%"}
**purrr**  
enhancements for R's functional programming
:::

::: {.column width="25%"}
**stringr**  
simplify working with strings
:::

::: {.column width="25%"}
**forcats**  
simplify working with factors
:::

::: {.column width="25%"}
:::

::::

## Inline Styling

You can style things like:

- **bold text**
- *italic text*
- ~~strikethrough text~~
- [links]()
- `inline code`
- [function_names]{.func}
- [package_names]{.pkg}

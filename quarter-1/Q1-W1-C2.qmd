---
title: "Best Practices & Troubleshooting"
subtitle: Q1-W1-C2
order: 2
format:
  revealjs:
    theme: [default, ../d2mr.scss]
    slide-number: c/t
    width: 1600
    height: 900
    margin: .1
    scrollable: true
    incremental: false
    transition: slide
    background-transition: fade
    highlight-style: github
    code-line-numbers: true
    code-copy: true
    footer: "D2M-R Q1 | Week 1 Class 2" #  quarter, week, and class
    logo: ""
    chalkboard: true
    multiplex: false
editor: source
execute:
  echo: true
  eval: false
  warning: false
  message: false
---

<!-- ## 🛎️ Housekeeping & Reminders 🛎️ {.smaller} -->

<!-- ::: incremental -->
<!-- ::: -->

## A Preface

-   Debugging is programming.
    -   It's not extra; it's essential.
-   Programming depends on collaboration.
    -   Asking for help is not cheating!
-   Questions \> Answers
    -   Get the basics down, then get everything else you need when you need it.
-   Troubleshooting includes debugging, *among other things*.
    -   These skills translate beyond fixing code.
    -   Please stop telling me that "in programming it's called debugging."

# A Preface

## Debugging *is* Programming

::::: columns
::: {.column width="50%"}
<!-- probably a cartoon -->

### The Myth

-   **Programmers are geniuses who have a sacred knowledge.**
    -   They just know everything and never need to ask for help
-   **The debugging coders do is a highly specialized skill.**
    -   You need lots of training to understand what it even is.
-   **If you're debugging, you did something wrong.**
    -   If you knew what you were doing then you would have done it right.
-   **Programming requires mastery of a programming language.**
    -   You need to know all the functions and processes before you can do anything.
-   **You can recognize an expert programmer by their abundant knowledge of the language.**
    -   If they do have to ask for help, they have to find someone who knows more than they do.
:::

::: {.column width="50%"}
### The Reality

-   **Debugging is not extra – it's essential**
    -   80% of programming time is spent debugging <!-- there's got to be a cartoon for this -->
-   **Troubleshooting includes debugging, *among other things*.**
    -   These skills translate beyond fixing code.
    -   Please stop telling me that "in programming it's called debugging."
-   **Programming depends on collaboration**
    -   Asking for help is not cheating!
    -   Programming knowledge is freely **distributed and shared**
-   **Questions \> Answers**
    -   Get the basics down, then get everything else you need when you need it.
-   **Master the foundations and then just go for it**
:::
:::::

::: callout-tip
Knowing how to ask the right questions to solve problems and learn independently is legitimately and indisputably more valuable than knowing lots of functions and language-specific processes.
:::

# Best Practices

> The best way to troubleshoot is to avoid it.

## Keep Your Code:

::::: columns
::: {.column width="50%"}
-   **Standardized**
    -   style guides, internal consistency
-   **Intelligible** - clear comments and naming
    -   informative comments, meaningful naming, documentation
:::

::: {.column width="50%"}
-   **Maintainable**
    -   sustainable over time and transportable
-   **Contextualized**
-   appropriate for your community and your project
:::
:::::

## Standardized Code

-   **Standardized** code is easier to read, understand, and maintain.
-   Use a style guide
-   Maintain internal consistency

## R Standard Formatting

::::: columns
::: {.column width="50%"}
### R is pretty forgiving

-   Whitespace insensitive
-   Few "forbidden" characters

### So choose where to be cautious

-   Avoid special characters (even if they are technically allowed)
-   Prioritize readability over conciseness
:::

::: {.column width="50%"}
### Style Guides

-   **The right style is the one you can stick to**
    -   [Google's R Style Guide](https://google.github.io/styleguide/Rguide.html)
    -   [Tidyverse Style Guide](https://style.tidyverse.org/)
    -   [Individualized Style Guide]()
        -   my own guide, a tweaked version of the tidyverse guide
:::
:::::

::: callout-tip
(note about the stylr package)
:::

# Intelligible Code

## Commenting Best Practices

:::::::: columns
:::: {.column width="60%"}
::: incremental
1.  Comments should not duplicate code
2.  Good comments do not excuse unclear code
3.  If you can't write a clear comment, there may be a problem with the code
4.  Comments should dispel confusion, not cause it
5.  Explain unidiomatic code in comments
6.  Provide links to the original source of copied code
7.  Include links to external references where helpful
8.  Add comments when fixing bugs
9.  Use comments to mark incomplete implementations
:::
::::

::::: {.column width="40%" style="font-size: 1.3em"}
::: {.callout-tip style="margin-bottom: 2em"}
## Keep Collaboration in Mind

Be kind not just to others who may work with you, but also to future-you.
:::

::: callout-important
## Natural languages \> programming languages

The language you speak is infinitely more intuitive, nuanced, specific, and adaptable. Take advantage of it.
:::
:::::
::::::::

## Meaningful Naming

> “There are only two hard things in Computer Science: cache invalidation and naming things.”
> — Phil Karlton

::::::: columns

::::: {.column width="40%"}

::: callout-warning
## Names should describe the named thing!

Not as easy as it sounds.
:::

- Avoid disinformation
- Use pronounceable names
- Use searchable names
- Pick one word/format per concept
- Avoid encodings

:::::

::::: {.column width="60%"}

![Keep it simple, stupid – commitstrip.com](../images/variable-name-cartoon.jpg){style="align: right;"}

:::::

:::::::

::: notes
**Avoid disinformation** - Don't include `_df` in the name of a data.table - Don't name a function `get_number` if it returns a string **Use pronounceable names** - `child_gesture` vs `cgtbl` - `group_SES_quartile` vs `grpsq`

**Use searchable names** - `x` is useful in math, not in programming - Plan for when you need to find/replace names

**Pick one word/format per concept** - `gesture.freqs`, `gesture.rates`, `gesture.ratios` - Not `count.gestures`, `summ.rates.gestures`, `grats`

**Avoid encodings** - Names should make sense on their own
:::

## Documentation

::: {.callout-important style="font-size: 1.3em;"}
## This is could be a whole class by itself!

We won't get into the weeds of how *you* should document, but we will cover the basics of how to use documentation and how to find it. When you need to write your own documentation, you'll have strong examples.
:::

### For Our Purposes

-   **Pay attention** to how documentation you reference is structured
-   **Intentionally notice** when it's helpful (or not) and why
-   There's [**extensive documentation** about R documentation](https://contributor.r-project.org/rdevguide/chapters/documenting.html)

## Maintainable - Lifecycles

## Maintainable - DRY Programming

## Maintainable - Transportable

## Contextualized - Community Rules

## Contextualized - Project Needs

## GitHub & Version Control

## R & Quarto Notebooks

## Code Chunks

# Troubleshooting

## Documentation

## ?help

## Function Documentation

## Package Documentation

## Resources

# Solving Your Own Problems

## Solving Your Own Problems

Because no one will help you until you at least try.

-   Error messages
-   Line-by-line debugging
-   Rubber duck debugging
-   Garbage in, garbage out

## Error Messages

## Common Error Messages

<!-- see textbook for more examples and detailed explanations -->

## Other Errors

"But my error message isn't common!"

"My error message is common but the solution isn't working!"

"I have literally no idea what this message means!"

**Google it.**

## Errors vs. Warnings

## Line-by-Line Debugging

## Rubber Duck Debugging

## Garbage In, Garbage Out

## Bad Data & Bad Decisions

# Ask the Internet

## Ask the Internet

It's very smart sometimes.

-   Start strong
-   Crowdsource
-   AI

## Start Strong

## How to Ask Questions

<!-- cartoons & links -->

## Tips for Asking Questions

## Crowdsource

-   Slack (not just ours)
-   Stack Overflow
    -   also Datacamp, R bloggers, Reddit, etc.
    -   mostly Stack Overflow
-   **The key is asking the right questions!**

## Ask AI

"Can AI just do this for me?"

Yes and no.

## I Asked AI

In its own words...

# Ask Humans

## Ask Humans

Because are people on the internet even real?

-   Classmates & groups
-   Class slack
-   Instructors

## D2M-R Troubleshooting Process

1.  Read relevant documentation.
2.  Identify error messages and warnings and attempt to resolve them.
3.  Confirm that your data and code play nice together.
4.  Review code line by line (and talk to a duck).
5.  Identify as many *specific* issues as you can and construct questions that will address them.
6.  Use peer, crowdsource, and AI resources to find answers to those questions.
7.  Email your TA or attend their open office hours.
8.  Email Dr. Dowling or make an office hours appointment.

If you email Dr. Dowling or your TA, your email must outline how you have gone through these steps.

# Starting From "Nothing"

## When you're at a loss...

"What's this git ignore thing you keep mentioning?"

"How do I find a function or package that I need if I don't even know if one exists?"

"How do I get started with complex packages like ggplot2, stats, and psych?"

Know the outcome you want and work backwards. What do you need to know? What questions do you need to ask?
